" Plugins ===========================================================

if has('autocmd')
  filetype plugin indent on
endif

call plug#begin('~/.vim/plugged')

let fzf_hook = 'yes | ./install --no-fish'

" colors / language support
" Plug 'chriskempson/base16-vim'
" Plug 'tomasr/molokai'
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'chunkhang/vim-mbsync', { 'for': 'mbsync' }
Plug 'eiginn/iptables-vim', { 'for': 'iptables' }
Plug 'nanotech/jellybeans.vim'
Plug 'sirtaj/vim-openscad', { 'for': 'scad' }
Plug 'vim-scripts/confluencewiki.vim', { 'for': 'confluencewiki' }
if has('lambda')
  Plug 'git@github.com:googlebleh/vim-rfc-reader.git'
endif

" light plugins
Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }
Plug 'bronson/vim-visual-star-search'
Plug 'godlygeek/tabular', { 'on': 'Tabularize' }
Plug 'googlebleh/lbdbq', { 'for': 'mail' }
Plug 'https://gitlab.com/dbeniamine/todo.txt-vim.git'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'vim-scripts/DoxygenToolkit.vim'

" medium plugins
" Plug 'googlebleh/vim-ripgrep', { 'branch': 'cwee/fzf_name_collision' }
Plug 'junegunn/fzf.vim'
  " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': fzf_hook }

" heavy plugins
" Plug 'github/copilot.vim'
"" for CopilotChat
" Plug 'ibhagwan/fzf-lua'
" Plug 'CopilotC-Nvim/CopilotChat.nvim'
"" for avante
Plug 'nvim-lua/plenary.nvim'
Plug 'MunifTanjim/nui.nvim'
Plug 'MeanderingProgrammer/render-markdown.nvim'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'HakonHarnes/img-clip.nvim'
Plug 'zbirenbaum/copilot.lua'
Plug 'stevearc/dressing.nvim' " for enhanced input UI
Plug 'folke/snacks.nvim' " for modern input UI
Plug 'yetone/avante.nvim', { 'branch': 'main', 'do': 'make' }

" autocmd! User avante.nvim lua << EOF
" EOF

call plug#end()

let g:Todo_fold_char = 'x'
let g:Todo_txt_do_not_map = 1

" " ripgrep in AP repo
" function! tesla#ap#ripgrep(pattern)
"   let l:rg_command_old = g:rg_command
"   let g:rg_command += ' -g*.cpp -g!{legacy_platforms,test,platform_specific,component_specific,tools}'
"   Ripgrep g:rg_command, a:pattern
"   let g:rg_command = l:rg_command_old
" endfunction
" command! APRipgrep call tesla#ap#ripgrep(<q-args>)

if has('nvim')
lua << EOF

--   require('fzf-lua').register_ui_select()
--   require("CopilotChat").setup { model = "claude-3.7-sonnet" }

  require('avante').setup({
    provider = 'copilot',
    auto_suggestions_provider = 'claude',
      providers = {
        claude = {
          endpoint = "https://api.anthropic.com",
          model = "claude-sonnet-4",
          extra_request_body = {
            temperature = 0.75,
            max_tokens = 4096,
          },
        },
      },
  })
  -- views can only be fully collapsed with the global statusline
  vim.opt.laststatus = 3

EOF
endif

" Appearance ========================================================

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
let g:markdown_fenced_languages = [
      \ 'bash=sh',
      \ 'c',
      \ 'diff',
      \ 'html',
      \ 'python'
      \]

" fixup artifacts on load when running in tmux
" https://vi.stackexchange.com/a/247
if &term =~ '256color'
  " disable Background Color Erase
  set t_ut=
endif
set t_Co=256 " to run inside docker
colorscheme jellybeans

set cursorline
set hlsearch
set ignorecase smartcase
set nolist wrap linebreak breakat&vim " line wrap between words
set nowrap
set number relativenumber " hybrid line numbers
set ruler
set shortmess-=S
set showcmd

set colorcolumn=78
highlight ColorColumn ctermbg=0 guibg=black

set spelllang=en_us
highlight SpellBad cterm=underline ctermbg=0
highlight SpellCap cterm=underline ctermbg=0
highlight SpellLocal cterm=underline ctermbg=0

autocmd BufRead,BufNewFile *.confluencewiki set filetype=confluencewiki
autocmd BufRead,BufNewFile *.iptables set filetype=iptables
" Signature files for SML
autocmd BufRead,BufNewFile *.sig set filetype=sml
autocmd BufRead,BufNewFile todo-*.txt set filetype=todo

" Controls ==========================================================

set backspace=indent,eol,start " backspace over everything in insert mode
set grepprg=grep\ -n\ --exclude-dir=.git\ --exclude=tags\ $*\ /dev/null
set hidden
set history=10000
set incsearch
set keywordprg=:Man
set omnifunc=syntaxcomplete#Complete
set splitright
set tags+=tags;/ " search parent dirs for ctags file
set wildmenu

if has('nvim')
  " set to default: nvim changes this when ripgrep is detected
  set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m
  set mouse=
else
  " https://stackoverflow.com/a/2158610/6466133
  set noesckeys
endif

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

" todo: add persistent undo https://stackoverflow.com/a/22676189/6466133

let usrdict_fpath = "/usr/share/dict/words"
if filereadable(usrdict_fpath)
  set dictionary+=usrdict_fpath
endif

" Trim trailing whitespace: https://vi.stackexchange.com/a/456
function! TrimWhitespace()
  let l:save = winsaveview()
  %s/\s\+$//e
  call winrestview(l:save)
endfunction
command! TrimWhitespace call TrimWhitespace()

function! PutDate()
  put =strftime('%F')
endfunction
command! PutDate call PutDate()
